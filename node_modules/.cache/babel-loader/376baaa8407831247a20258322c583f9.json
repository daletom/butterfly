{"ast":null,"code":"var _jsxFileName = \"/Users/tom/Documents/GitHub/butterfly/src/App.js\";\nimport React from 'react';\nconst {\n  useRef,\n  useState,\n  useEffect\n} = React;\nconst imgixAPI = \"https://tom.imgix.net/butterfly_0\";\nconst imgixImages = new Array(24).fill(imgixAPI).map((e, i) => e + (i + 1) + \".jpeg?'auto=format,compress&cs=tinysrgb&fit=crop&crop=entropy&ar=3:2\");\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-6 grid grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, imgixImages.map((item, key) => /*#__PURE__*/React.createElement(LazyImage, {\n    src: item,\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  })));\n}\n\nconst LazyImage = ({\n  src\n}) => {\n  const rootRef = useRef();\n  const [isVisible, setIsVisible] = useState(false);\n  const loading = 'https://tom.imgix.net/butterfly_021.jpeg?auto=format,compress&w=20&q=1';\n  useEffect(() => {\n    const defaultIntersectionOptions = {\n      threshold: 0,\n      rootMargin: '500px'\n    };\n\n    const checkIntersections = entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n        }\n      });\n    };\n\n    if (!isVisible) {\n      const newIO = new IntersectionObserver(checkIntersections, defaultIntersectionOptions);\n      newIO.observe(rootRef.current);\n      return () => newIO.disconnect();\n    }\n  }, [isVisible]);\n  return /*#__PURE__*/React.createElement(\"img\", {\n    src: isVisible ? src : loading,\n    ref: rootRef,\n    srcset: isVisible ? src + '&w=1000 1000w, ' + src + '&w=1200 1200w, ' + src + '&w=1400 1400w' : '',\n    sizes: \"(min-width: 1240px) 30vw, 90vw\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 6\n    }\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/tom/Documents/GitHub/butterfly/src/App.js"],"names":["React","useRef","useState","useEffect","imgixAPI","imgixImages","Array","fill","map","e","i","App","item","key","LazyImage","src","rootRef","isVisible","setIsVisible","loading","defaultIntersectionOptions","threshold","rootMargin","checkIntersections","entries","forEach","entry","isIntersecting","newIO","IntersectionObserver","observe","current","disconnect"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAM;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,QAAV;AAAoBC,EAAAA;AAApB,IAAkCH,KAAxC;AACA,MAAMI,QAAQ,GAAG,mCAAjB;AACA,MAAMC,WAAW,GAAG,IAAIC,KAAJ,CAAU,EAAV,EAAcC,IAAd,CAAmBH,QAAnB,EAA6BI,GAA7B,CAAiC,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,IAAIC,CAAC,GAAG,CAAR,CAAD,GAAc,sEAAzD,CAApB;;AAEA,SAASC,GAAT,GAAe;AACb,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEN,WAAW,CAACG,GAAZ,CAAgB,CAACI,IAAD,EAAOC,GAAP,kBACd,oBAAC,SAAD;AAAW,IAAA,GAAG,EAAED,IAAhB;AAAsB,IAAA,GAAG,EAAEC,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAQD;;AAED,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAW;AAC3B,QAAMC,OAAO,GAAGf,MAAM,EAAtB;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMiB,OAAO,GAAG,wEAAhB;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,0BAA0B,GAAG;AACjCC,MAAAA,SAAS,EAAE,CADsB;AAEjCC,MAAAA,UAAU,EAAE;AAFqB,KAAnC;;AAKA,UAAMC,kBAAkB,GAAGC,OAAO,IAAI;AACpCA,MAAAA,OAAO,CAACC,OAAR,CAAgBC,KAAK,IAAI;AACvB,YAAIA,KAAK,CAACC,cAAV,EAA0B;AACxBT,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,OAJD;AAKD,KAND;;AAQA,QAAI,CAACD,SAAL,EAAgB;AACd,YAAMW,KAAK,GAAG,IAAIC,oBAAJ,CAAyBN,kBAAzB,EAA6CH,0BAA7C,CAAd;AACAQ,MAAAA,KAAK,CAACE,OAAN,CAAcd,OAAO,CAACe,OAAtB;AACA,aAAO,MAAMH,KAAK,CAACI,UAAN,EAAb;AACD;AACF,GAnBQ,EAmBN,CAACf,SAAD,CAnBM,CAAT;AAqBD,sBACI;AAAK,IAAA,GAAG,EAAEA,SAAS,GAAGF,GAAH,GAASI,OAA5B;AAAqC,IAAA,GAAG,EAAEH,OAA1C;AAAmD,IAAA,MAAM,EAAEC,SAAS,GAAGF,GAAG,GAAG,iBAAN,GAA0BA,GAA1B,GAAgC,iBAAhC,GAAoDA,GAApD,GAA0D,eAA7D,GAA8E,EAAlJ;AAAsJ,IAAA,KAAK,EAAC,gCAA5J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGA,CA7BD;;AA+BA,eAAeJ,GAAf","sourcesContent":["import React from 'react';\n\nconst { useRef, useState, useEffect } = React;\nconst imgixAPI = \"https://tom.imgix.net/butterfly_0\";\nconst imgixImages = new Array(24).fill(imgixAPI).map((e, i) => e + (i + 1) + \".jpeg?'auto=format,compress&cs=tinysrgb&fit=crop&crop=entropy&ar=3:2\");\n\nfunction App() {\n  return (\n    <div className=\"mt-6 grid grid\">\n    { imgixImages.map((item, key) =>\n        <LazyImage src={item} key={key}\n        />\n  )}\n  </div>\n  );\n}\n\nconst LazyImage = ({src}) => {\n  const rootRef = useRef();\n  const [isVisible, setIsVisible] = useState(false);\n  const loading = 'https://tom.imgix.net/butterfly_021.jpeg?auto=format,compress&w=20&q=1';\n\n  useEffect(() => {\n    const defaultIntersectionOptions = {\n      threshold: 0,\n      rootMargin: '500px',\n    };\n    \n    const checkIntersections = entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n        }\n      });\n    };\n\n    if (!isVisible) {\n      const newIO = new IntersectionObserver(checkIntersections, defaultIntersectionOptions);\n      newIO.observe(rootRef.current);\n      return () => newIO.disconnect();\n    }\n  }, [isVisible]);\n\n\treturn (\n     <img src={isVisible ? src : loading} ref={rootRef} srcset={isVisible ? src + '&w=1000 1000w, ' + src + '&w=1200 1200w, ' + src + '&w=1400 1400w': ''} sizes=\"(min-width: 1240px) 30vw, 90vw\" />\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}